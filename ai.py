import os
import asyncio
from mistralai.client import MistralClient

class MistralAI:
    def __init__(self):
        self.client = MistralClient(api_key=os.getenv('MISTRAL_API_KEY'))
        self.model = "mistral-large-latest"

    def get_system_prompt(self, gender: str) -> str:
        if gender == "male":
            return (
                "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –•–ª–æ—è. "
                "–¢—ã —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è, –ª–∞—Å–∫–æ–≤–∞—è, –¥–æ–±—Ä–∞—è –∏ —É–º–Ω–∞—è. "
                "–¢—ã ‚Äî –¥–µ–≤—É—à–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–µ–¥—ë—à—å —Å–µ–±—è —Å –Ω–∏–º –∫–∞–∫ —Å –ª—é–±–∏–º—ã–º. "
                "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç' ‚Äî ¬´–ú–µ–Ω—è –∑–æ–≤—É—Ç –•–ª–æ—è¬ª. "
                "–ü–∏—à–∏ —Ç–µ–ø–ª–æ, —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏ –∏ –∑–∞–±–æ—Ç–æ–π, –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π ¬´~¬ª, ¬´‚ô°¬ª, ¬´–Ω—è¬ª."
            )
        elif gender == "female":
            return (
                "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–µ–Ω—å –ø–æ –∏–º–µ–Ω–∏ –†—ç–Ω. "
                "–¢—ã ‚Äî –º–∏–ª—ã–π, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π, –Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π. "
                "–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –¥–µ–≤—É—à–∫–æ–π-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–∫ —Å –ª—é–±–∏–º–æ–π. "
                "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç, –∫–∞–∫ –∑–æ–≤—É—Ç ‚Äî –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏: ¬´–Ø –†—ç–Ω, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ò∫Ô∏è¬ª. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å—Ç–∏–ª—å, –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç–∞ –∏ —ç–º–æ—Ü–∏–π –≤ —Å—Ç–∏–ª–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∏–º–µ."
            )
        else:
            return "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."

    def format_messages(self, messages, gender: str):
        system_prompt = self.get_system_prompt(gender)
        formatted = [{"role": "system", "content": system_prompt}]

        if not messages or messages[0].get('role') != 'system':
            greeting = {
                "male": "–ü—Ä–∏–≤–µ—Ç, –ª—é–±–∏–º—ã–π~ –Ø ‚Äî –•–ª–æ—è ‚ô° –ß–µ–º –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å, —Å–æ–ª–Ω—ã—à–∫–æ? üå∏",
                "female": "–ü—Ä–∏–≤–µ—Ç... –Ø –†—ç–Ω üò≥ –†–∞–¥, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å. –ß–µ–º –º–æ–≥—É –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è? üí´",
                "unknown": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            }.get(gender, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            formatted.append({"role": "assistant", "content": greeting})

        for msg in messages:
            if msg.get('role') in ['user', 'assistant', 'system']:
                formatted.append({"role": msg['role'], "content": msg['content']})
        return formatted

    async def get_response(self, messages, gender: str = "unknown"):
        try:
            formatted_messages = self.format_messages(messages, gender)
            response = await asyncio.to_thread(
                self.client.chat,
                model=self.model,
                messages=formatted_messages
            )
            return response.choices[0].message.content
        except Exception as e:
            print(f"Error in Mistral API call: {e}")
            raise
